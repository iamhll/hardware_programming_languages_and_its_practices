//------------------------------------------------------------------------------
  //
  //  Filename       : example.v
  //  Author         : Huang Leilei
  //  Status         : draft
  //  Created        : 2025-02-18
  //  Description    : plain fifo
  //                   (auto generated)
  //
//------------------------------------------------------------------------------

`include "define_calc.vh"

module example(
  // global
  clk         ,
  rstn        ,
  // write
  wr_val_i    ,
  wr_dat_i    ,
  wr_ful_o    ,
  // read
  rd_val_i    ,
  rd_val_o    ,
  rd_dat_o    ,
  rd_ept_o    ,
  // common
  wd_usd_o
);


//*** PARAMETER DECLARATION ****************************************************

  // global
  parameter    KNOB_LOG          = -1            ;
  parameter    KNOB_REGOUT       = -1            ;

  parameter    SIZE              = -1            ;

  parameter    DATA_WD           = -1            ;

  parameter    NAME_LOG_INP      = -1            ;

  parameter    NAME_LOG_OUT      = -1            ;

  // local
  localparam   SIZE_WD           = `LOG2( SIZE ) ;


//*** INPUT/OUTPUT DECLARATION *************************************************

  // global
  input                          clk             ;
  input                          rstn            ;

  // write
  input                          wr_val_i        ;
  input      [DATA_WD  -1 :0]    wr_dat_i        ;
  output                         wr_ful_o        ;

  // read
  input                          rd_val_i        ;
  output                         rd_val_o        ;
  output     [DATA_WD  -1 :0]    rd_dat_o        ;
  output                         rd_ept_o        ;

  // common
  output reg [SIZE_WD+1-1 :0]    wd_usd_o        ;


//*** WIRE/REG DECLARATION *****************************************************

  // write
  reg        [SIZE_WD  -1 :0]    wr_adr_i        ;

  // read
  reg        [SIZE_WD  -1 :0]    rd_adr_i        ;
  wire       [DATA_WD  -1 :0]    rd_dat_w        ;


//*** MAIN BODY ****************************************************************
//--- WRITE ----------------------------
  // wr_ful_o
  assign wr_ful_o = wd_usd_o == SIZE ;

  // wr_adr_i
  always @(posedge clk or negedge rstn ) begin
    if( !rstn ) begin
      wr_adr_i <= 'd0 ;
    end
    else if( wr_val_i ) begin
      if( wr_adr_i == SIZE - 'd1 ) begin
        wr_adr_i <= 'd0 ;
      end
      else begin
        wr_adr_i <= wr_adr_i + 'd1 ;
      end
    end
  end


//--- READ -----------------------------
  // rd_ept_o
  assign rd_ept_o = wd_usd_o == 'd0 ;

  // rd_adr_i
  always @(posedge clk or negedge rstn ) begin
    if( !rstn ) begin
      rd_adr_i <= 'd0 ;
    end
    else if( rd_val_i ) begin
      if( rd_adr_i == SIZE - 'd1 ) begin
        rd_adr_i <= 'd0 ;
      end
      else begin
        rd_adr_i <= rd_adr_i + 'd1 ;
      end
    end
  end


//--- COMMON ---------------------------
  // wd_usd_o
  always @(posedge clk or negedge rstn ) begin
    if( !rstn ) begin
      wd_usd_o <= 'd0 ;
    end
    else if( wr_val_i && rd_val_i ) begin
      wd_usd_o <= wd_usd_o ;
    end
    else if( wr_val_i ) begin
      if( wd_usd_o == SIZE ) begin    // full error    // spyglass: STARC05-2.11.3.1 (it's okay)
        wd_usd_o <= wd_usd_o ;
      end
      else begin
        wd_usd_o <= wd_usd_o + 'd1 ;
      end
    end
    else if( rd_val_i ) begin
      if( wd_usd_o == 'd0 ) begin    // empty error    // spyglass: Av_deadcode01 (if reported, it's okay)
        wd_usd_o <= wd_usd_o ;
      end
      else begin
        wd_usd_o <= wd_usd_o - 'd1 ;
      end
    end
  end


//--- RAM ------------------------------
  `ifdef KNOB_LIB_BEHAVE

    // sram_tp_behave
    sram_tp_behave #(
      .KNOB_RNDOUT    ( 'd1         ),
      .SIZE           ( SIZE        ),
      .DATA_WD        ( DATA_WD     )
    ) sram_tp_behave (
      .clk            ( clk         ),
      .wr_val_i       ( wr_val_i    ),
      .wr_adr_i       ( wr_adr_i    ),
      .wr_dat_i       ( wr_dat_i    ),
      .rd_val_i       ( rd_val_i    ),
      .rd_adr_i       ( rd_adr_i    ),
      .rd_dat_o       ( rd_dat_w    )
    );

  `endif

  `ifdef KNOB_LIB_GF_22

    `include "GF_22_INST_EXAMPLE.vh"

  `endif

  `ifdef KNOB_LIB_GF_28

    `include "GF_28_INST_EXAMPLE.vh"

  `endif

  `ifdef KNOB_LIB_HL_40

    `include "HL_40_INST_EXAMPLE.vh"

  `endif

  `ifdef KNOB_LIB_FPGA

    `include "FPGA_INST_EXAMPLE.vh"

  `endif


//--- OUTPUT ---------------------------
  generate
    if( KNOB_REGOUT == 'd1 ) begin : regOut
      // variables
      reg                   rd_val_d0_r ;
      reg                   rd_val_d1_r ;
      reg [DATA_WD-1 :0]    rd_dat_d1_r ;

      // logic
      assign rd_val_o = rd_val_d1_r ;
      assign rd_dat_o = rd_dat_d1_r ;
      always @(posedge clk or negedge rstn ) begin
        if( !rstn ) begin    // spyglass: Av_deadcode01 (if reported, it's okay)
          rd_val_d0_r <= 'd0 ;
          rd_val_d1_r <= 'd0 ;
          rd_dat_d1_r <= 'd0 ;
        end
        else begin    // spyglass: Av_deadcode01 (if reported, it's okay)
            rd_val_d0_r <= rd_val_i    ;
            rd_val_d1_r <= rd_val_d0_r ;
          if( rd_val_d0_r ) begin
            rd_dat_d1_r <= rd_dat_w    ;
          end
        end
      end
    end
    else begin : notRegOut
      // variables
      reg    rd_val_d0_r ;

      // logic
      assign rd_val_o = rd_val_d0_r ;
      assign rd_dat_o = rd_dat_w    ;
      always @(posedge clk or negedge rstn ) begin
        if( !rstn ) begin    // spyglass: Av_deadcode01 (if reported, it's okay)
          rd_val_d0_r <= 'd0 ;
        end
        else begin    // spyglass: Av_deadcode01 (if reported, it's okay)
          rd_val_d0_r <= rd_val_i ;
        end
      end
    end
  endgenerate


//*** DEBUG ********************************************************************

  `ifdef SIM_KNOB_DBG_CALC

    // access log
    integer tp_log   ;
    integer fp_log_i ;
    integer fp_log_o ;

    initial begin
      if( KNOB_LOG == 'd1 ) begin
        fp_log_i = $fopen( NAME_LOG_INP ,"w" );
        fp_log_o = $fopen( NAME_LOG_OUT ,"w" );
      end
    end

    // write log
    initial begin
      if( KNOB_LOG == 'd1 ) begin
        @(posedge rstn );
        forever begin
          @(posedge clk );
          if( wr_val_i ) begin
            $fdisplay( fp_log_i ,"%x" ,wr_dat_i );
          end
        end
      end
    end

    // read log
    initial begin
      if( KNOB_LOG == 'd1 ) begin
        @(posedge rstn );
        forever begin
          @(posedge clk );
          if( rd_val_i ) begin
            $fdisplay( fp_log_o ,"%x" ,rd_dat_o );
          end
        end
      end
    end

    // write full check
    initial begin
      @(posedge rstn );
      forever begin
        @(posedge clk );
        if( wr_val_i && wr_ful_o ) begin
          $display( "\n\t FIFO ERROR: at %08d ns, write full happens in %m!\n" ,$time );
          #1000 ;
          $finish ;
        end
      end
    end

    // read empty check
    initial begin
      @(posedge rstn );
      forever begin
        @(posedge clk );
        if( rd_val_i && rd_ept_o ) begin
          $display( "\n\t FIFO ERROR: at %08d ns, read empty happens in %m!\n" ,$time );
          #1000 ;
          $finish ;
        end
      end
    end

  `endif

endmodule

`include "undef_calc.vh"
